<!DOCTYPE html>
<html>

<head>
  <title>
    <%=typeof title == 'undefined' ? 'Q-pon' : title%>
  </title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous">
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.2.0/css/ion.rangeSlider.css"
  />
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.2.0/css/ion.rangeSlider.skinHTML5.min.css"
  />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker.standalone.min.css">
  <style>
    .navbar-collapse.collapse.in {
      display: block !important;
    }
  </style>

</head>

<body>
  <div class="container">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="/Coupon/index">Q-pon</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup"
        aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav mr-auto mt-2 mt-lg-0">
          <li class="nav-item <%=req.path=='/Coupon/index'?'active':''%>">
            <a class="nav-link" href="/Coupon/index">Home</a>
          </li>
          <li class="nav-item <%=req.path=='/Coupon/search'?'active':''%>">
            <a class="nav-link" href="/Coupon/search">Search
              <span class="sr-only">(current)</span>
            </a>
          </li>
          <% if (req.session.username == 'admin') { %>
            <li class="nav-item <%=req.path=='/Coupon/create'?'active':''%>">
              <a class="nav-link" href="/Coupon/create">Create</a>
            </li>
            <li class="nav-item <%=req.path=='/Coupon/admin'?'active':''%>">
              <a class="nav-link" href="/Coupon/admin">Admin</a>
            </li>
            
            <% } else if (typeof req.session.username !== "undefined") { %>
              <li class="nav-item <%=req.path=='/User/myCoupons'?'active':''%>">
                <a class="nav-link" href="/User/myCoupons">My Coupons</a>
              </li>
              <% } %>


        </div>
        <!-- <form action="/User/login" method="get">
          <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Login</button>
        </form> -->
        <% if (req.session.username == 'admin') { %>
          <div class="my-2 my-sm-0">
            Hi, admin. (<a href="/user/logout">Logout</a>)
          </div>
          <% } else if (typeof req.session.username !== "undefined") { %>
            <div class="my-2 my-sm-0">
              Hi, <%= req.session.username %>. (<a href="/user/logout">Logout</a>)
            </div>
            <% } else { %>
              <form action="/User/login" method="get">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Login</button>
              </form>
              <% } %>
      </div>
    </nav>

    <div class="jumbotron jumbotron-fluid">
      <div class="container">
        <h1 class="display-4">Q-pon</h1>
        <p class="lead">Redeem your coins for dinning coupons.</p>
      </div>
    </div>
  </div>
  <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <!-- JQuery -->
    <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
    <!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script> -->
    <!-- Bootstrap -->
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
    <!-- Bootstrap Date-Picker Plugin -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.1/js/bootstrap-datepicker.min.js"></script>

    <!-- Include Ion Ranger -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.2.0/js/ion.rangeSlider.min.js"></script>

    <script>
      $("#coin_range").ionRangeSlider({
        type: "double",
        min: 10,
        max: 10000,
        from: $("#coin_low").val() ? $("#coin_low").val() : 10,
        to: $("#coin_high").val() ? $("#coin_high").val() : 10000,
        prefix: "$",
        step: 100,
        hide_min_max: true,
        grid: true
      });
    </script>
</body>

</html>